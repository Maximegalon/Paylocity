{
    "pipes": [
        {
            "name": "BonusMessagePipe",
            "id": "pipe-BonusMessagePipe-469ad8fd8a10e5a5498c77ef32dfa3ec",
            "file": "src/app/employees/employee-details/employee-details.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "dependant",
                            "type": "IDependant"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 12,
                    "jsdoctags": [
                        {
                            "name": "dependant",
                            "type": "IDependant",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "bonusmessage",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { EmployeeService } from '../../services/employee/employee.service';\r\nimport { IDependant } from '../../interfaces/IDependant';\r\n\r\n@Pipe({\r\n  name: 'bonusmessage'\r\n})\r\nexport class BonusMessagePipe implements PipeTransform {\r\n  constructor(private employeeService: EmployeeService) {\r\n  }\r\n\r\n  transform(dependant: IDependant, args?: any): string {\r\n    const discountApplies = this.employeeService.doesPersonGetDiscount(dependant);\r\n\r\n    return discountApplies ? '(There IS a name based cost reduction)' : '(There IS NOT a name based cost reduction)';\r\n  }\r\n}\r\n"
        }
    ],
    "interfaces": [
        {
            "name": "IDependant",
            "id": "interface-IDependant-22f2d7d04cd52ddfc8436f609683cdc0",
            "file": "src/app/interfaces/IDependant.ts",
            "type": "interface",
            "sourceCode": "export interface IDependant {\r\n  employeeID: number;\r\n  spouse?: boolean;\r\n  name: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "employeeID",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "spouse",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IEmployee",
            "id": "interface-IEmployee-f55bb4fc1af3e60a6aaad685800c3ff5",
            "file": "src/app/interfaces/IEmployee.ts",
            "type": "interface",
            "sourceCode": "export interface IEmployee {\r\n  id: number;\r\n  name: string;\r\n  salary: number;\r\n  hireDate: Date;\r\n}\r\n",
            "properties": [
                {
                    "name": "hireDate",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "salary",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IPerson",
            "id": "interface-IPerson-681bfaeb1038f9c6ff139a081aa787c0",
            "file": "src/app/interfaces/IPerson.ts",
            "type": "interface",
            "sourceCode": "export interface IPerson {\r\n  name: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ITableColumn",
            "id": "interface-ITableColumn-d4fcc437734859334fe367204b5671c0",
            "file": "src/app/interfaces/ITableColumn.ts",
            "type": "interface",
            "sourceCode": "export interface ITableColumn {\r\n  field: string;\r\n  header: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "field",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "header",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "EmployeeService",
            "id": "injectable-EmployeeService-ebc3da66cc415a040be43a596a687a86",
            "file": "src/app/services/employee/employee.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "DEPENDANTBENEFITCOST",
                    "defaultValue": "500",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "DEPENDANTDISCOUNT",
                    "defaultValue": ".1",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "EMPLOYEEBENEFITCOST",
                    "defaultValue": "1000",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "EMPLOYEEDISCOUNT",
                    "defaultValue": ".1",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [
                {
                    "name": "calculateEmployeeTotalCost",
                    "args": [
                        {
                            "name": "employee",
                            "type": "IEmployee"
                        },
                        {
                            "name": "dependants",
                            "type": "IDependant[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 60,
                    "description": "<p>Determines if the person gets a discount</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1525,
                                "end": 1533,
                                "flags": 0,
                                "escapedText": "employee"
                            },
                            "type": "IEmployee",
                            "tagName": {
                                "pos": 1507,
                                "end": 1512,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The employee to determine costs for</p>\n",
                            "typeExpression": {
                                "pos": 1513,
                                "end": 1524,
                                "flags": 0,
                                "kind": 277,
                                "type": {
                                    "pos": 1514,
                                    "end": 1523,
                                    "flags": 2097152,
                                    "kind": 161,
                                    "typeName": {
                                        "pos": 1514,
                                        "end": 1523,
                                        "flags": 2097152,
                                        "escapedText": "IEmployee"
                                    }
                                }
                            }
                        },
                        {
                            "name": {
                                "pos": 1597,
                                "end": 1607,
                                "flags": 0,
                                "escapedText": "dependants"
                            },
                            "type": "IDependant[]",
                            "tagName": {
                                "pos": 1576,
                                "end": 1581,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The employee&#39;s dependants to determine costs for</p>\n",
                            "typeExpression": {
                                "pos": 1582,
                                "end": 1596,
                                "flags": 0,
                                "kind": 277,
                                "type": {
                                    "pos": 1583,
                                    "end": 1595,
                                    "flags": 2097152,
                                    "kind": 166,
                                    "elementType": {
                                        "pos": 1583,
                                        "end": 1593,
                                        "flags": 2097152,
                                        "kind": 161,
                                        "typeName": {
                                            "pos": 1583,
                                            "end": 1593,
                                            "flags": 2097152,
                                            "escapedText": "IDependant"
                                        }
                                    }
                                }
                            }
                        },
                        {
                            "tagName": {
                                "pos": 1663,
                                "end": 1670,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>number</p>\n"
                        }
                    ]
                },
                {
                    "name": "doesPersonGetDiscount",
                    "args": [
                        {
                            "name": "person",
                            "type": "IPerson"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 47,
                    "description": "<p>Determines if the person gets a discount</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1199,
                                "end": 1205,
                                "flags": 0,
                                "escapedText": "person"
                            },
                            "type": "IPerson",
                            "tagName": {
                                "pos": 1183,
                                "end": 1188,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The person to check for a discount</p>\n",
                            "typeExpression": {
                                "pos": 1189,
                                "end": 1198,
                                "flags": 0,
                                "kind": 277,
                                "type": {
                                    "pos": 1190,
                                    "end": 1197,
                                    "flags": 2097152,
                                    "kind": 161,
                                    "typeName": {
                                        "pos": 1190,
                                        "end": 1197,
                                        "flags": 2097152,
                                        "escapedText": "IPerson"
                                    }
                                }
                            }
                        },
                        {
                            "tagName": {
                                "pos": 1247,
                                "end": 1254,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>boolean</p>\n"
                        }
                    ]
                },
                {
                    "name": "getBaseUrl",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 75,
                    "description": "<p>Gets the url to make calls too. This would normally go through auth, middlewear, proxy etc. etc</p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 2454,
                                "end": 2461,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>string</p>\n"
                        }
                    ]
                },
                {
                    "name": "getEmployeeDetails",
                    "args": [
                        {
                            "name": "employeeId",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IEmployee>",
                    "typeParameters": [],
                    "line": 37,
                    "description": "<p>Get employee details</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 861,
                                "end": 871,
                                "flags": 0,
                                "escapedText": "employeeId"
                            },
                            "type": "number",
                            "tagName": {
                                "pos": 846,
                                "end": 851,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The employee ID to fetch information</p>\n",
                            "typeExpression": {
                                "pos": 852,
                                "end": 860,
                                "flags": 0,
                                "kind": 277,
                                "type": {
                                    "pos": 853,
                                    "end": 859,
                                    "flags": 2097152,
                                    "kind": 134
                                }
                            }
                        },
                        {
                            "tagName": {
                                "pos": 915,
                                "end": 922,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Observable<IEmployee></p>\n"
                        }
                    ]
                },
                {
                    "name": "getEmployees",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IEmployee[]>",
                    "typeParameters": [],
                    "line": 27,
                    "description": "<p>Get employees from the server</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 652,
                                "end": 659,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Observable&lt;IEmployee[]&gt;</p>\n"
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { IEmployee } from '../../interfaces/IEmployee';\r\nimport { IPerson } from '../../interfaces/IPerson';\r\nimport { IDependant } from '../../interfaces/IDependant';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EmployeeService {\r\n  baseUrl: string;\r\n  EMPLOYEEBENEFITCOST = 1000;\r\n  DEPENDANTBENEFITCOST = 500;\r\n  EMPLOYEEDISCOUNT = .1;\r\n  DEPENDANTDISCOUNT = .1;\r\n\r\n  constructor(private _http: HttpClient) {\r\n    this.baseUrl = this.getBaseUrl();\r\n  }\r\n\r\n /**\r\n * Get employees from the server\r\n *\r\n * @returns Observable<IEmployee[]>\r\n */\r\n  getEmployees(): Observable<IEmployee[]> {\r\n    return this._http.get<any>(`${this.baseUrl}employees`);\r\n  }\r\n\r\n  /**\r\n  * Get employee details\r\n  *\r\n  * @param {number} employeeId The employee ID to fetch information\r\n  * @returns Observable<IEmployee>\r\n  */\r\n  getEmployeeDetails(employeeId: number): Observable<IEmployee> {\r\n    return this._http.get<any>(`${this.baseUrl}employees/details/${employeeId.toString()}`);\r\n  }\r\n\r\n  /**\r\n  * Determines if the person gets a discount\r\n  *\r\n  * @param {IPerson} person The person to check for a discount\r\n  * @returns boolean\r\n  */\r\n  doesPersonGetDiscount(person: IPerson): boolean {\r\n    const name: string = person.name;\r\n\r\n    return (name && name.trim().toLowerCase().substring(0, 1) === 'a');\r\n  }\r\n\r\n  /**\r\n  * Determines if the person gets a discount\r\n  *\r\n  * @param {IEmployee} employee The employee to determine costs for\r\n  * @param {IDependant[]} dependants The employee's dependants to determine costs for\r\n  * @returns number\r\n  */\r\n  calculateEmployeeTotalCost(employee: IEmployee, dependants: IDependant[]): number {\r\n    // @TODO: Inject a config service with the values, don't hard code consts\r\n    const employeeCost: number = this.EMPLOYEEBENEFITCOST * ((this.doesPersonGetDiscount(employee)) ? (1 - this.EMPLOYEEDISCOUNT) : 1);\r\n    const dependantsCountWithBonus = dependants.filter(d => this.doesPersonGetDiscount(d)).length;\r\n    const dependantsCost = dependantsCountWithBonus * this.DEPENDANTBENEFITCOST * (1 - this.EMPLOYEEDISCOUNT) +\r\n      (dependants.length - dependantsCountWithBonus) * this.DEPENDANTBENEFITCOST;\r\n\r\n    return employeeCost + dependantsCost;\r\n  }\r\n\r\n  /**\r\n  * Gets the url to make calls too. This would normally go through auth, middlewear, proxy etc. etc\r\n  *\r\n  * @returns string\r\n  */\r\n  private getBaseUrl(): string {\r\n    return document.getElementsByTagName('base')[0].href;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_http",
                        "type": "HttpClient"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "_http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-a2d1e577d157b3cb58ead820233d3568",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\r\n\r\nexport class AppPage {\r\n  navigateTo() {\r\n    return browser.get('/');\r\n  }\r\n\r\n  getMainHeading() {\r\n    return element(by.css('app-root h1')).getText();\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "getMainHeading",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-c29c0d6e9c574e35b1fba6035ae6378c",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'app'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n// @TODO: Do a company prefix and not \"app\" everywhere\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html'\r\n})\r\nexport class AppComponent {\r\n  title = 'app';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<body>\r\n  <app-nav-menu></app-nav-menu>\r\n  <div class=\"container\">\r\n    <router-outlet></router-outlet>\r\n  </div>\r\n</body>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "EmployeeDetailsComponent",
            "id": "component-EmployeeDetailsComponent-d75330682a8e9e595700180ac3d70c70",
            "file": "src/app/employees/employee-details/employee-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-employee-details",
            "styleUrls": [
                "./employee-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./employee-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dependants",
                    "defaultValue": "[]",
                    "type": "IDependant[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "employee",
                    "type": "IEmployee",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "employeeCost",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "employeeId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "employeeTotalCost",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "loading",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "newdependantname",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "numberOfPayperiods",
                    "defaultValue": "26",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "addDependant",
                    "args": [
                        {
                            "name": "dependantName",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "description": "<p>Assigns a dependant to the employee</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1514,
                                "end": 1527,
                                "flags": 0,
                                "escapedText": "dependantName"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 1499,
                                "end": 1504,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The name of the dependant</p>\n",
                            "typeExpression": {
                                "pos": 1505,
                                "end": 1513,
                                "flags": 0,
                                "kind": 277,
                                "type": {
                                    "pos": 1506,
                                    "end": 1512,
                                    "flags": 2097152,
                                    "kind": 137
                                }
                            }
                        },
                        {
                            "tagName": {
                                "pos": 1560,
                                "end": 1567,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>void</p>\n"
                        }
                    ]
                },
                {
                    "name": "calculateEmployeeTotalCost",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "description": "<p>Sets the total employee (without dependants) cost</p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 2125,
                                "end": 2132,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>void</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "removeDependant",
                    "args": [
                        {
                            "name": "idx",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "description": "<p>Removes a dependant assigned to the employee</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1839,
                                "end": 1842,
                                "flags": 0,
                                "escapedText": "idx"
                            },
                            "type": "number",
                            "tagName": {
                                "pos": 1824,
                                "end": 1829,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The ordinal location in the array of dependants to remove</p>\n",
                            "typeExpression": {
                                "pos": 1830,
                                "end": 1838,
                                "flags": 0,
                                "kind": 277,
                                "type": {
                                    "pos": 1831,
                                    "end": 1837,
                                    "flags": 2097152,
                                    "kind": 134
                                }
                            }
                        },
                        {
                            "tagName": {
                                "pos": 1907,
                                "end": 1914,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>void</p>\n"
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { EmployeeService } from '../../services/employee/employee.service';\r\nimport { IEmployee } from '../../interfaces/IEmployee';\r\nimport { IDependant } from '../../interfaces/IDependant';\r\n\r\n@Component({\r\n  selector: 'app-employee-details',\r\n  templateUrl: './employee-details.component.html',\r\n  styleUrls: ['./employee-details.component.scss'],\r\n})\r\nexport class EmployeeDetailsComponent implements OnInit {\r\n  loading = true;\r\n  employeeId: number;\r\n  employee: IEmployee;\r\n  dependants: IDependant[] = [];\r\n  newdependantname = '';\r\n  numberOfPayperiods = 26;\r\n  employeeCost: number;\r\n  employeeTotalCost: number;\r\n\r\n  constructor(\r\n    private _employee: EmployeeService,\r\n    private _activatedRoute: ActivatedRoute) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.employeeId = parseInt(this._activatedRoute.snapshot.paramMap.get('employeeId'), 10);\r\n\r\n    this._employee.getEmployeeDetails(this.employeeId).subscribe(\r\n      (result: IEmployee) => {\r\n        this.employee = result;\r\n        this.loading = false;\r\n\r\n        this.employeeCost = this._employee.calculateEmployeeTotalCost(this.employee, []);\r\n        this.employeeTotalCost = this.employeeCost;\r\n      },\r\n      error => {\r\n        // @TODO: Throw a toast and handle page gracefully\r\n        alert('Sorry, an error has occured. Please try again.');\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n  * Assigns a dependant to the employee\r\n  *\r\n  * @param {string} dependantName The name of the dependant\r\n  * @returns void\r\n  */\r\n  addDependant(dependantName: string): void {\r\n    this.dependants.push({ employeeID: this.employeeId, name: dependantName });\r\n\r\n    this.calculateEmployeeTotalCost();\r\n  }\r\n\r\n  /**\r\n  * Removes a dependant assigned to the employee\r\n  *\r\n  * @param {number} idx The ordinal location in the array of dependants to remove\r\n  * @returns void\r\n  */\r\n  removeDependant(idx: number): void {\r\n    this.dependants.splice(idx, 1);\r\n\r\n    this.calculateEmployeeTotalCost();\r\n  }\r\n\r\n  /**\r\n  * Sets the total employee (without dependants) cost\r\n  *\r\n  * @returns void\r\n  */\r\n  private calculateEmployeeTotalCost(): void {\r\n    this.employeeTotalCost = this._employee.calculateEmployeeTotalCost(this.employee, this.dependants);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  width: 100%;\r\n\r\n  .spinner {\r\n    margin: auto;\r\n    width: 50%;\r\n    text-align: center;\r\n  }\r\n\r\n  .information {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    margin-top: 1rem;\r\n\r\n    > div {\r\n      width: 50%;\r\n\r\n      .dependants, .summary {\r\n        padding: .25rem;\r\n      }\r\n    }\r\n  }\r\n\r\n  .enterbutton {\r\n    transform: scale(0.5);\r\n    vertical-align: middle;\r\n  }\r\n\r\n  .paper {\r\n    font: normal 12px/1.5 \"Lucida Grande\", arial, sans-serif;\r\n    width: 100%;\r\n    margin: 0 auto 10px;\r\n    padding: 6px 5px 4px 42px;\r\n    position: relative;\r\n    color: #444;\r\n    line-height: 20px;\r\n    border: 1px solid #d2d2d2;\r\n    background: #fff;\r\n    background: -o-linear-gradient(top, #d9eaf3 0%, #fff 8%) 0 4px;\r\n    background: linear-gradient(to bottom, #d9eaf3 0%, #fff 8%) 0 4px;\r\n    background-size: 100% 20px;\r\n    border-radius: 3px;\r\n    box-shadow: 0 1px 2px rgba(0,0,0,0.07);\r\n  }\r\n\r\n  .paper::before {\r\n    content: '';\r\n    position: absolute;\r\n    width: 4px;\r\n    top: 0;\r\n    left: 30px;\r\n    bottom: 0;\r\n    border: 1px solid;\r\n    border-color: transparent #efe4e4;\r\n  }\r\n}\r\n",
                    "styleUrl": "./employee-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_employee",
                        "type": "EmployeeService"
                    },
                    {
                        "name": "_activatedRoute",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "_employee",
                        "type": "EmployeeService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>Please enter the employees dependants for an estimate on benefits cost</p>\r\n\r\n<app-entry-bar (selected)=\"addDependant($event)\" [textPlaceholder]=\"'Enter a dependant Name'\" [buttonLabel]=\"'Add Dependant'\"></app-entry-bar>\r\n\r\n<div *ngIf=\"loading\" class=\"spinner\">\r\n  <p-progressSpinner *ngIf=\"!employees\"></p-progressSpinner>\r\n</div>\r\n\r\n<div *ngIf=\"!loading\" class=\"information\">\r\n  <div>\r\n    <ng-container *ngFor=\"let d of dependants; let i = index\">\r\n      <div class=\"dependants\">\r\n        <span>\r\n          {{ d.name }}\r\n          {{ d | bonusmessage }}\r\n          <button pButton type=\"button\" class=\"enterbutton p-button-rounded p-button-danger p-ripple p-button p-component p-button-icon-only pi pi-times p-button-sm\" (click)=\"removeDependant(i)\"></button>\r\n        </span>\r\n      </div>\r\n    </ng-container>\r\n  </div>\r\n  <div>\r\n    <div class=\"summary\">\r\n      <ul>\r\n        <li>{{ employee.name }} has a salary of {{ employee.salary | currency:\"USD\":\"symbol\":\"1.0-0\" }}/year</li>\r\n        <li>The take home pay over {{ numberOfPayperiods }} pay periods is {{ (employee.salary/numberOfPayperiods) | currency:\"USD\":\"symbol\":\"1.0-0\"}}/period</li>\r\n        <li>The cost of benefits for {{ employee.name }} is {{ employeeCost | currency:\"USD\":\"symbol\":\"1.0-0\" }}/year</li>\r\n        <li *ngIf=\"this.dependants.length > 0\">The total cost for the benefits for {{ employee.name }} with dependants is {{ employeeTotalCost | currency:\"USD\":\"symbol\":\"1.0-0\" }}/year</li>\r\n        <li>This cost is {{ employeeTotalCost/26 | currency:\"USD\":\"symbol\":\"1.0-0\" }} per pay period</li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "EmployeeListComponent",
            "id": "component-EmployeeListComponent-38f14e6175db8cd7879bb837c2a0f041",
            "file": "src/app/employees/employees.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-employees",
            "styleUrls": [
                "./employee.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./employees.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cols",
                    "type": "ITableColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "employees",
                    "type": "IEmployee[]",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "handleButtonClick",
                    "args": [
                        {
                            "name": "employeeId",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "description": "<p>Operate on the employee selected</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1239,
                                "end": 1249,
                                "flags": 0,
                                "escapedText": "employeeId"
                            },
                            "type": "number",
                            "tagName": {
                                "pos": 1224,
                                "end": 1229,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The employee ID selected</p>\n",
                            "typeExpression": {
                                "pos": 1230,
                                "end": 1238,
                                "flags": 0,
                                "kind": 277,
                                "type": {
                                    "pos": 1231,
                                    "end": 1237,
                                    "flags": 2097152,
                                    "kind": 134
                                }
                            }
                        },
                        {
                            "tagName": {
                                "pos": 1281,
                                "end": 1288,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>void</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { EmployeeService } from '../services/employee/employee.service';\r\nimport { IEmployee, ITableColumn } from '../interfaces';\r\n\r\n// @TODO: Configure company namespace, instead of \"app\"\r\n@Component({\r\n  selector: 'app-employees',\r\n  templateUrl: './employees.component.html',\r\n  styleUrls: ['./employee.component.scss'],\r\n})\r\nexport class EmployeeListComponent implements OnInit {\r\n  public employees: IEmployee[];\r\n  cols: ITableColumn[];\r\n\r\n  constructor(\r\n    private _employee: EmployeeService,\r\n    private _router: Router,\r\n  ) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.cols = [\r\n      { field: 'id', header: 'Employee Number' },\r\n      { field: 'name', header: 'Name' },\r\n      { field: 'salary', header: 'Annual Salary' },\r\n      { field: 'hireDate', header: 'Hire Date' },\r\n      { field: null, header: 'Employee Details' },\r\n    ];\r\n\r\n    this._employee.getEmployees().subscribe(\r\n      (result: IEmployee[]) => {\r\n        this.employees = result;\r\n      },\r\n      error => {\r\n        alert('Sorry, an error has occured. Please try again.');\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n  * Operate on the employee selected\r\n  *\r\n  * @param {number} employeeId The employee ID selected\r\n  * @returns void\r\n  */\r\n  handleButtonClick(employeeId: number): void {\r\n    this._router.navigate([`/employee/${employeeId}`]);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  width: 100%;\r\n\r\n  .spinner {\r\n    margin: auto;\r\n    width: 50%;\r\n    text-align: center;\r\n  }\r\n}\r\n",
                    "styleUrl": "./employee.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_employee",
                        "type": "EmployeeService"
                    },
                    {
                        "name": "_router",
                        "type": "Router"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "_employee",
                        "type": "EmployeeService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h2 id=\"tableLabel\">Employees</h2>\r\n\r\n<div class=\"spinner\">\r\n  <p-progressSpinner *ngIf=\"!employees\"></p-progressSpinner>\r\n</div>\r\n\r\n<p-table *ngIf=\"employees\" [value]=\"employees\" [paginator]=\"true\" [rows]=\"5\" [showCurrentPageReport]=\"true\" currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords} employees\">\r\n  <ng-template pTemplate=\"header\">\r\n    <tr>\r\n      <th *ngFor=\"let col of cols\">\r\n        {{col.header}}\r\n      </th>\r\n    </tr>\r\n  </ng-template>\r\n  <ng-template pTemplate=\"body\" let-employee>\r\n    <tr>\r\n      <td *ngFor=\"let col of cols; index as i;\">\r\n        <span *ngIf=\"i < 2\">{{employee[col.field]}}</span>\r\n        <span *ngIf=\"i == 2\">{{employee[col.field] | currency:\"USD\":\"symbol\":\"1.0-0\"}}</span>\r\n        <span *ngIf=\"i == 3\">{{employee[col.field] | date}}</span>\r\n        <button *ngIf=\"i == 4\" pButton type=\"button\" label=\"Estimate Costs\" icon=\"pi pi-user-edit\" (click)=\"handleButtonClick(employee[cols[0].field])\"></button>\r\n      </td>\r\n    </tr>\r\n  </ng-template>\r\n  <ng-template pTemplate=\"emptymessage\">\r\n    <tr>\r\n      <td *ngFor=\"let col of cols; index as i;\">\r\n        No employees found\r\n      </td>\r\n    </tr>\r\n  </ng-template>\r\n</p-table>\r\n"
        },
        {
            "name": "EntryBarComponent",
            "id": "component-EntryBarComponent-f922debf74229eb967816a37ded30296",
            "file": "src/app/components/entry-bar/entry-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-entry-bar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./entry-bar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "buttonLabel",
                    "line": 9
                },
                {
                    "name": "textPlaceholder",
                    "line": 10
                }
            ],
            "outputsClass": [
                {
                    "name": "selected",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 11,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "formGroup",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                },
                {
                    "name": "selectionMade",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "description": "<p>Handles when a selection is entered in the text field</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 694,
                                "end": 701,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>void</p>\n"
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-entry-bar',\r\n  templateUrl: './entry-bar.component.html'\r\n})\r\nexport class EntryBarComponent implements OnInit {\r\n  @Input() buttonLabel;\r\n  @Input() textPlaceholder;\r\n  @Output() selected = new EventEmitter<string>();\r\n\r\n  formGroup: FormGroup;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n    this.formGroup = new FormGroup({\r\n      dependantName: new FormControl('', [Validators.required, Validators.maxLength(200)])\r\n    });\r\n  }\r\n\r\n  /**\r\n  * Handles when a selection is entered in the text field\r\n  *\r\n  * @returns void\r\n  */\r\n  selectionMade(): void {\r\n    this.selected.emit(this.formGroup.value.dependantName);\r\n\r\n    this.formGroup.patchValue({\r\n      dependantName: ''\r\n    });\r\n    this.formGroup.markAsPristine();\r\n    this.formGroup.markAsUntouched();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form [formGroup]=\"formGroup\">\n  <div class=\"p-inputgroup\">\n    <span class=\"p-inputgroup-addon\"><i class=\"pi pi-user\"></i></span>\n    <input type=\"text\" pInputText placeholder=\"{{textPlaceholder}}\" formControlName=\"dependantName\" name=\"dependantName\" id=\"dependantName\" (keyup.enter)=\"selectionMade()\"/>\n    <button type=\"button\" pButton pRipple label=\"{{buttonLabel}}\" (click)=\"selectionMade()\" [disabled]=\"!formGroup.valid\"></button>\n  </div>\n</form>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-920a8bb4859a8cedee0f1b4ac4aa7c78",
            "file": "src/app/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.scss']\r\n})\r\nexport class HomeComponent {\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  .topic {\r\n    font-weight: bold;\r\n  }\r\n}\r\n",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<h1>Company management</h1>\r\n\r\n<p>This is a basic web site to look at employee benefits:</p>\r\n<p>Techniques include:</p>\r\n<ul>\r\n  <li><span class=\"topic\">.NET Entity Framework</span>: Backend RESETful endpoints</li>\r\n  <li><span class=\"topic\">.Angular</span>: Components, unit test, storybook, linting, pipes, services, routing</li>\r\n  <li><span class=\"topic\">NG Prime</span>: Component library</li>\r\n</ul>\r\n<br />\r\n<p>Why I chose what I did:</p>\r\n<ul>\r\n  <li><strong>.NET</strong>: I used it more in the past, I liked it better than Java and Spring.  Though both are similar and both quite capable.</li>\r\n  <li><strong>More experience with Angular vs React</strong>: I feel it is better for larger project needing more structure</li>\r\n  <li><strong>NG Prime</strong>: I prefer this and Google Material a lot, I just went with this</li>\r\n</ul>\r\n"
        },
        {
            "name": "NavMenuComponent",
            "id": "component-NavMenuComponent-8dca958570c0e469abfd4220f026f2f5",
            "file": "src/app/components/nav-menu/nav-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-nav-menu",
            "styleUrls": [
                "./nav-menu.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./nav-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isExpanded",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "description": "<p>Toggles the menu open/closed</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 290,
                                "end": 297,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>void</p>\n"
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-nav-menu',\r\n  templateUrl: './nav-menu.component.html',\r\n  styleUrls: ['./nav-menu.component.css']\r\n})\r\nexport class NavMenuComponent {\r\n  isExpanded = false;\r\n\r\n  /**\r\n  * Toggles the menu open/closed\r\n  *\r\n  * @returns void\r\n  */\r\n  toggle(): void {\r\n    this.isExpanded = !this.isExpanded;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@media (min-width: 768px) {\r\n  html {\r\n    font-size: 16px;\r\n  }\r\n}\r\n\r\n.box-shadow {\r\n  box-shadow: 0 .25rem .75rem rgba(0, 0, 0, .05);\r\n}\r\n",
                    "styleUrl": "./nav-menu.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<header>\r\n  <nav class=\"navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3\">\r\n    <div class=\"container\">\r\n      <h1>Company HR Admin</h1>\r\n      \r\n      <button\r\n        class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\".navbar-collapse\" aria-label=\"Toggle navigation\" [attr.aria-expanded]=\"isExpanded\" (click)=\"toggle()\">\r\n        <span class=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n\r\n      <div class=\"navbar-collapse collapse d-sm-inline-flex flex-sm-row-reverse\" [ngClass]=\"{ show: isExpanded }\">\r\n        <ul class=\"navbar-nav flex-grow\">\r\n          <li class=\"nav-item\" [routerLinkActive]=\"['link-active']\" [routerLinkActiveOptions]=\"{ exact: true }\">\r\n            <a class=\"nav-link text-dark\" [routerLink]=\"['/']\">Home</a>\r\n          </li>\r\n\r\n          <li class=\"nav-item\" [routerLinkActive]=\"['link-active']\">\r\n            <a class=\"nav-link text-dark\" [routerLink]=\"['/employees']\">Employees</a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </nav>\r\n</header>\r\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-cca1a8911321fa17756ce90c90de65cc",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 66,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "BonusMessagePipe"
                        },
                        {
                            "name": "EmployeeDetailsComponent"
                        },
                        {
                            "name": "EmployeeListComponent"
                        },
                        {
                            "name": "HomeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppServerModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ComponentsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "EntryBarComponent"
                        },
                        {
                            "name": "NavMenuComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "EntryBarComponent"
                        },
                        {
                            "name": "NavMenuComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: true\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: false\r\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "any"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "stories",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/entry-bar/entry-bar.stories.ts",
                "type": "",
                "defaultValue": "storiesOf('Common Controls/Entry bar', module)\r\n  .addDecorator(\r\n    moduleMetadata({\r\n      imports: [\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        ButtonModule,\r\n      ],\r\n      declarations: [\r\n        EntryBarComponent\r\n      ],\r\n      providers: []\r\n    })\r\n  )\r\n  .addDecorator(centered)\r\n  .addDecorator(withKnobs)\r\n  .add('Complete', () => ({\r\n      component: EntryBarComponent,\r\n      template: template,\r\n      props: {\r\n        buttonLabel: text('Click Me:', 'Click Me'),\r\n        textPlaceholder: text('Input field placeholder:', 'Enter the item to create')},\r\n    }),\r\n    {\r\n      notes: {\r\n        // markdown: readme\r\n      }\r\n    }\r\n  )"
            },
            {
                "name": "template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/entry-bar/entry-bar.stories.ts",
                "type": "",
                "defaultValue": "`\r\n<div style=\"width: 100%;\">\r\n  <app-entry-bar [buttonLabel]=\"buttonLabel\" [textPlaceholder]=\"textPlaceholder\"></app-entry-bar>\r\n</div>\r\n`"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "any"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false\r\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
                }
            ],
            "src/app/components/entry-bar/entry-bar.stories.ts": [
                {
                    "name": "stories",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/entry-bar/entry-bar.stories.ts",
                    "type": "",
                    "defaultValue": "storiesOf('Common Controls/Entry bar', module)\r\n  .addDecorator(\r\n    moduleMetadata({\r\n      imports: [\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        ButtonModule,\r\n      ],\r\n      declarations: [\r\n        EntryBarComponent\r\n      ],\r\n      providers: []\r\n    })\r\n  )\r\n  .addDecorator(centered)\r\n  .addDecorator(withKnobs)\r\n  .add('Complete', () => ({\r\n      component: EntryBarComponent,\r\n      template: template,\r\n      props: {\r\n        buttonLabel: text('Click Me:', 'Click Me'),\r\n        textPlaceholder: text('Input field placeholder:', 'Enter the item to create')},\r\n    }),\r\n    {\r\n      notes: {\r\n        // markdown: readme\r\n      }\r\n    }\r\n  )"
                },
                {
                    "name": "template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/entry-bar/entry-bar.stories.ts",
                    "type": "",
                    "defaultValue": "`\r\n<div style=\"width: 100%;\">\r\n  <app-entry-bar [buttonLabel]=\"buttonLabel\" [textPlaceholder]=\"textPlaceholder\"></app-entry-bar>\r\n</div>\r\n`"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 6,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/entry-bar/entry-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EntryBarComponent",
                "coveragePercent": 12,
                "coverageCount": "1/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/entry-bar/entry-bar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "stories",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/entry-bar/entry-bar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/nav-menu/nav-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavMenuComponent",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/app/employees/employee-details/employee-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EmployeeDetailsComponent",
                "coveragePercent": 21,
                "coverageCount": "3/14",
                "status": "low"
            },
            {
                "filePath": "src/app/employees/employee-details/employee-details.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "BonusMessagePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/employees/employees.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EmployeeListComponent",
                "coveragePercent": 16,
                "coverageCount": "1/6",
                "status": "low"
            },
            {
                "filePath": "src/app/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/IDependant.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDependant",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/IEmployee.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IEmployee",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/IPerson.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPerson",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/ITableColumn.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITableColumn",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/employee/employee.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "EmployeeService",
                "coveragePercent": 41,
                "coverageCount": "5/12",
                "status": "medium"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}